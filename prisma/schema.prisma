// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SignInType {
  Username
}

enum AccountRole {
  Admin
  User
}

model Account {
  id               BigInt      @id
  role             AccountRole @default(User)
  name             String      @unique @db.VarChar(20)
  introduce        String?
  profileImagePath String?     @unique
  /// [AccountPositionNames]
  positionNames    Json        @default("[]")
  /// [AccountTechStackNames]
  techStackNames   Json        @default("[]")
  /// [AccountSnsLinks]
  snsLinks         Json        @default("[]")

  signInType SignInType
  username   String?    @unique @db.VarChar(20)
  password   String?

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  projects       Project[]
  projectMembers ProjectMember[]
}

model AccountDomainEvent {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
}

model Position {
  id BigInt @id

  name String @unique @db.VarChar(50)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model PositionDomainEvent {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
}

model TechStack {
  id BigInt @id

  name String @unique @db.VarChar(50)

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)
}

model TechStackDomainEvent {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
}

enum ProjectStatus {
  recruiting
  inProgress
  completed
}

enum ProjectMemberRole {
  owner
  member
}

model Project {
  id BigInt @id

  owner   Account @relation(fields: [ownerId], references: [id])
  ownerId BigInt

  name               String
  description        String
  status             ProjectStatus
  category           String
  currentMemberCount Int
  /// [ProjectTags]
  tags               Json          @default("[]")

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  projectMembers ProjectMember[]
}

model ProjectDomainEvent {
  id           BigInt   @id
  actorId      BigInt?
  aggregateId  BigInt
  eventName    String
  eventPayload Json
  version      Int
  storedAt     DateTime @default(now()) @db.Timestamp(3)

  @@unique([aggregateId, version])
}

model ProjectMember {
  id BigInt @id

  account   Account @relation(fields: [accountId], references: [id])
  accountId BigInt
  project   Project @relation(fields: [projectId], references: [id])
  projectId BigInt

  position         String?
  role             ProjectMemberRole
  name             String
  profileImagePath String?
  /// [ProjectMemberTechStackNames]
  techStackNames   Json              @default("[]")

  createdAt DateTime @default(now()) @db.Timestamp(3)
  updatedAt DateTime @updatedAt @db.Timestamp(3)

  @@unique([accountId, projectId])
}
